{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","ac.team.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","Team","birthdate","App","e","setState","searchField","target","value","handleFilter","filter","dev","includes","team","state","this","filteredTeam","toLowerCase","toLocaleLowerCase","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAGaA,G,MAAO,SAAAC,GAAK,OACvB,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,cACb,yBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,YAEN,4BAAKL,EAAMG,QAAQG,MACnB,2BAAIN,EAAMG,QAAQI,QAEpB,yBAAKN,UAAU,aAAf,YCTSO,G,MAAW,SAAAR,GAAK,OAC3B,yBAAKC,UAAU,aACZD,EAAMS,SAASC,IAAI,SAAAP,GAAO,OACzB,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,SCJzBS,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,2BACEb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCRDG,EAAO,CAClB,CACEX,KAAM,iBACNF,GAAI,QACJG,MAAO,0BACPQ,KAAM,aAER,CACET,KAAM,aACNF,GAAI,OACJG,MAAO,0BACPQ,KAAM,aAER,CACET,KAAM,gBACNF,GAAI,OACJG,MAAO,2BACPQ,KAAM,aAER,CACET,KAAM,YACNF,GAAI,OACJG,MAAO,yBACPQ,KAAM,aAER,CACET,KAAM,mBACNF,GAAI,OACJG,MAAO,8BACPQ,KAAM,aAER,CACET,KAAM,aACNF,GAAI,OACJG,MAAO,0BACPQ,KAAM,aAER,CACET,KAAM,iBACNF,GAAI,QACJG,MAAO,2BACPW,UAAW,aACXH,KAAM,aAER,CACET,KAAM,qBACNF,GAAI,QACJG,MAAO,0BACPQ,KAAM,aAER,CACET,KAAM,eACNF,GAAI,YACJG,MAAO,0BACPQ,KAAM,YAER,CACET,KAAM,aACNF,GAAI,OACJG,MAAO,yBACPQ,KAAM,aCJKI,G,kBAjDb,aAAe,IAAD,8BACZ,+CASFL,aAAe,SAAAM,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAX1B,EAcdC,aAAe,SAAAV,GACb,IAAMW,EAAST,EAAKS,OAAO,SAAAC,GAAG,OAAIA,EAAIZ,KAAKa,SAASb,KACpD,EAAKM,SAAS,CAAEQ,KAAMH,KAbtB,EAAKI,MAAQ,CACXD,KAAMZ,EACNK,YAAa,GACbI,OAAQ,IANE,E,sEAmBJ,IAAD,SACuBK,KAAKD,MAA3BD,EADD,EACCA,KAAMP,EADP,EACOA,YACRU,EAAeH,EAAKH,OAAO,SAAAC,GAAG,OAClCA,EAAIrB,KAAK2B,cAAcL,SAASN,EAAYY,uBAG9C,OACE,yBAAKjC,UAAU,OACb,qDACA,kBAAC,EAAD,CACEY,YAAY,sBACZC,aAAciB,KAAKjB,eAErB,yBAAKb,UAAU,oBACb,4BAAQkC,QAAS,kBAAM,EAAKV,aAAa,cAAzC,YAGA,4BAAQU,QAAS,kBAAM,EAAKV,aAAa,eAAzC,aAGA,4BAAQU,QAAS,kBAAM,EAAKd,SAAS,CAAEQ,KAAMZ,MAA7C,cAIF,kBAAC,EAAD,CAAUR,SAAUuB,S,GA5CVI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.23782617.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n  <div className='card-container'>\n    <div className='card-front'>\n      <img\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n        alt='monster'\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n    <div className='card-back'>Bacon</div>\n  </div>\n);\n","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n  <div className='card-list'>\n    {props.monsters.map(monster => (\n      <Card key={monster.id} monster={monster} />\n    ))}\n  </div>\n);\n","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className='search'\n    type='search'\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n","export const Team = [\n  {\n    name: 'Justin Mc Nary',\n    id: 'dev00',\n    email: 'jmcnary@redventures.com',\n    type: 'front-end',\n  },\n  {\n    name: 'Tom Zmyslo',\n    id: 'dev1',\n    email: 'tzmyslo@redventures.com',\n    type: 'front-end',\n  },\n  {\n    name: 'Bryan Chapman',\n    id: 'dev2',\n    email: 'bchapman@redventures.com',\n    type: 'front-end',\n  },\n  {\n    name: 'DUBB Sims',\n    id: 'dev3',\n    email: 'gwsims@redventures.com',\n    type: 'front-end',\n  },\n  {\n    name: 'Shaun Boehringer',\n    id: 'dev4',\n    email: 'sboehringer@redventures.com',\n    type: 'front-end',\n  },\n  {\n    name: 'Chas Vales',\n    id: 'dev5',\n    email: 'chvales@redventures.com',\n    type: 'front-end',\n  },\n  {\n    name: 'Joshua Soileau',\n    id: 'dev50',\n    email: 'jsoileau@redventures.com',\n    birthdate: '09/15/1989',\n    type: 'front-end',\n  },\n  {\n    name: 'Ryan NESSY Van Ess',\n    id: 'nessy',\n    email: 'rvaness@redventures.com',\n    type: 'front-end',\n  },\n  {\n    name: 'Carlos Silva',\n    id: 'backdev00',\n    email: 'casilva@redventures.com',\n    type: 'back-end',\n  },\n  {\n    name: 'Ryan Weber',\n    id: 'tank',\n    email: 'rweber@redventures.com',\n    type: 'back-end',\n  },\n];\n","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { Team } from './ac.team';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      team: Team,\n      searchField: '',\n      filter: '',\n    };\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  handleFilter = type => {\n    const filter = Team.filter(dev => dev.type.includes(type));\n    this.setState({ team: filter });\n  };\n\n  render() {\n    const { team, searchField } = this.state;\n    const filteredTeam = team.filter(dev =>\n      dev.name.toLowerCase().includes(searchField.toLocaleLowerCase()),\n    );\n\n    return (\n      <div className='App'>\n        <h1>ALLCONNECT DEVELOPERS</h1>\n        <SearchBox\n          placeholder='search by developer'\n          handleChange={this.handleChange}\n        />\n        <div className='button-container'>\n          <button onClick={() => this.handleFilter('back-end')}>\n            Back-End\n          </button>\n          <button onClick={() => this.handleFilter('front-end')}>\n            Front-End\n          </button>\n          <button onClick={() => this.setState({ team: Team })}>\n            Everybody\n          </button>\n        </div>\n        <CardList monsters={filteredTeam} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}